# snip
snippet mid "\mid \mid"
	\\mid ${1} \\mid ${0}
endsnippet

snippet srt "\sqrt{}"
	\\sqrt{${1}} ${0}
endsnippet

snippet mk "Math" wA
$${1}$`!p
if t[2] and t[2][0] not in [',', '.', '?', '-', ' ']:
    snip.rv = ' '
else:
    snip.rv = ''
`$2
endsnippet

snippet dm "Math" wA
\[
$1
.\] $0
endsnippet

snippet sign "Signature"
Yours sincerely,

Jiageng Ding
endsnippet

snippet today "Date"
`date +%F`
endsnippet

snippet box "myBox"
`!p snip.rv = '┌' + '─' * (len(t[1]) + 2) + '┐'`
│ $1 │
`!p snip.rv = '└' + '─' * (len(t[1]) + 2) + '┘'`
$0
endsnippet

########################
#sub- and super-script
########################

snippet '([A-Za-z])(\d)' "auto subscript" wrA
`!p snip.rv = match.group(1)`_`!p snip.rv = match.group(2)`
endsnippet

snippet '([A-Za-z])_(\d\d)' "auto subscript2" wrA
`!p snip.rv = match.group(1)`_{`!p snip.rv = match.group(2)`}
endsnippet

snippet sr "^2" iA
^2
endsnippet

snippet cb "^3" iA
^3
endsnippet

snippet compl "complement" iA
^{c}
endsnippet

snippet td "superscript" iA
^{$1}$0
endsnippet

#################
#Fraction
#################

snippet // "Fraction" iA
\\frac{$1}{$2}$0
endsnippet

snippet '((\d+)|(\d*)(\\)?([A-Za-z]+)((\^|_)(\{\d+\}|\d))*)/' "Fraction" wrA
\\frac{`!p snip.rv = match.group(1)`}{$1}$0
endsnippet

priority 1000
snippet '^.*\)/' "() Fraction" wrA
`!p
stripped = match.string[:-1]
depth = 0
i = len(stripped) - 1
while True:
	if stripped[i] == ')': depth += 1
	if stripped[i] == '(': depth -= 1
	if depth == 0: break;
	i -= 1
snip.rv = stripped[0:i] + "\\frac{" + stripped[i+1:-1] + "}"
`{$1}$0
endsnippet


#snippet / "Fraction" iA
#\\frac{${VISUAL}}{$1}$0
#endsnippet

snippet sympy "sympy block " w
sympy $1 sympy$0
endsnippet

priority 10000
snippet 'sympy(.*)sympy' "evaluate sympy" wr
`!p
from sympy import *
x, y, z, t = symbols('x y z t')
k, m, n = symbols('k m n', integer=True)
f, g, h = symbols('f g h', cls=Function)
init_printing()
snip.rv = eval('latex(' + match.group(1).replace('\\', '') \
    .replace('^', '**') \
    .replace('{', '(') \
    .replace('}', ')') + ')')
`
endsnippet

#############
#Sympy
#############

priority 1000
snippet math "mathematica block" w
math $1 math$0
endsnippet

priority 10000
snippet 'math(.*)math' "evaluate mathematica" wr
`!p
import subprocess
code = 'ToString[' + match.group(1) + ', TeXForm]'
snip.rv = subprocess.check_output(['wolframscript', '-code', code])
`
endsnippet

#######
#bar & hat & vector
########

priority 10
snippet "bar" "bar" riA
\overline{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])bar" "bar" riA
\overline{`!p snip.rv=match.group(1)`}
endsnippet

priority 10
snippet "hat" "hat" riA
\hat{$1}$0
endsnippet

priority 100
snippet "([a-zA-Z])hat" "hat" riA
\hat{`!p snip.rv=match.group(1)`}
endsnippet

snippet "(\\?\w+)(,\.|\.,)" "Vector postfix" riA
\vec{`!p snip.rv=match.group(1)`}
endsnippet

#context

global !p
texMathZones = ['texMathZone' + x for x in ['A', 'AS', 'B', 'BS', 'C', 'CS',
'D', 'DS', 'E', 'ES', 'F', 'FS', 'G', 'GS', 'H', 'HS', 'I', 'IS', 'J', 'JS',
'K', 'KS', 'L', 'LS', 'DS', 'V', 'W', 'X', 'Y', 'Z', 'AmsA', 'AmsB', 'AmsC',
'AmsD', 'AmsE', 'AmsF', 'AmsG', 'AmsAS', 'AmsBS', 'AmsCS', 'AmsDS', 'AmsES',
'AmsFS', 'AmsGS' ]]

texIgnoreMathZones = ['texMathText']

texMathZoneIds = vim.eval('map('+str(texMathZones)+", 'hlID(v:val)')")
texIgnoreMathZoneIds = vim.eval('map('+str(texIgnoreMathZones)+", 'hlID(v:val)')")

ignore = texIgnoreMathZoneIds[0]

def math():
	synstackids = vim.eval("synstack(line('.'), col('.') - (col('.')>=2 ? 1 : 0))")
	try:
		first = next(
            i for i in reversed(synstackids)
            if i in texIgnoreMathZoneIds or i in texMathZoneIds
        )
		return first != ignore
	except StopIteration:
		return False
endglobal


#context "math()"
#snippet sr "^2" iA
#^2
#endsnippet




######################3
###BEGIN###############
#######################

snippet beg "my latex begin"
%!TEX TS-program = xelatex
%MacTex
%@Author：JiagengDing
%@Mail:   JiagengDing@gmail.com

\documentclass[a4paper,12pt,UTF8]{ctexart}%A4纸，小四号字
\usepackage{ctex}
\usepackage{amsmath}
\usepackage{cite}
\usepackage{algorithm}
\usepackage{algpseudocode}
\renewcommand{\algorithmicrequire}{\textbf{Input:}}  % Use Input in the format of Algorithm
\renewcommand{\algorithmicensure}{\textbf{Output:}} % Use Output in the format of Algorithm
\usepackage{graphicx}
\usepackage{float}
\usepackage{subfigure}

\usepackage{mdframed}
\catcode`\┘=\active \catcode`\┌=\active \def ┌{\begin{mdframed}\centering} \def ┘{\end{mdframed}}%

\usepackage[top=2.5cm,bottom=2cm,left=2.5cm,right=2cm,headheight=1.5cm]{geometry}
\usepackage{lastpage} %总页数
\usepackage{fancyhdr}%页眉页脚
\usepackage{titlesec}%修改章节字体
\usepackage{float}
\usepackage{setspace}
\renewcommand{\baselinestretch}{1.25}%设置1.25倍行距
\CTEXsetup[number={\chinese{section}}]{section}                      %section形式改为一,二,三,..
\CTEXsetup[name={（,）}]{subsection}

\CTEXsetup[number={\chinese{subsection}}]{subsection}                %subsection形式改为（一,二,三,...）
\CTEXsetup[number=\arabic{subsubsection}]{subsubsection}             %subsubsection形式改为1，2，3，...


\zihao{-4}%设置小四号字
\renewcommand {\thetable} {\thesection{}-\arabic{table}}%对表格编码修改

\setlength{\parindent}{2em}
\usepackage{fontspec, xunicode, xltxtra}
\usepackage{xcolor}
\usepackage{makecell}%处理表格宏包

% \usepackage{listings}%导入代码块包
% \lstset{
% numbers=left,
% numberstyle= \tiny,
% keywordstyle= \color{ blue!70},
% commentstyle= \color{red!50!green!50!blue!50},
% frame=shadowbox, % 阴影效果
% rulesepcolor= \color{ red!20!green!20!blue!20},
% escapeinside=``, % 英文分号中可写入中文
% xleftmargin=2em,xrightmargin=2em, aboveskip=1em,
% framexleftmargin=2em
% } %修改代码显示效果

\newcommand{\enabstractname}{Abstract}
\newcommand{\cnabstractname}{摘要}
\newenvironment{enabstract}{%
\par\small
\noindent\mbox{}\hfill{\bfseries \enabstractname}\hfill\mbox{}\par
\vskip 2.5ex}{\par\vskip 2.5ex}
\newenvironment{cnabstract}{%
\par\small
\noindent\mbox{}\hfill{\bfseries \cnabstractname}\hfill\mbox{}\par
\vskip 2.5ex}{\par\vskip 2.5ex}


\title{\heiti \zihao{3} ${1}}
\author{${2}}
\date{${3}}

\begin{document}

%设置页眉页脚
\pagestyle{fancy}
\chead{}
%\rhead{}
\lhead{}
\cfoot[\songti \fontsize{9pt}]{\thepage}

\maketitle

\begin{cnabstract}
${4}
\par\textbf{关键字: }{${5}}
\end{cnabstract}

% \begin{enabstract}
% English abstract
% \par\textbf{Keywords:}{}
% \end{enabstract}


\newpage

\tableofcontents

\newpage

%\setcounter{page}{1}

${6}

\newpage

\begin{thebibliography}{99}

\bibitem{}
\bibitem{}
\bibitem{}

\end{thebibliography}
\end{document}
endsnippet


snippet bib "bibitem"
\bibitem{}${1}
endsnippet

snippet alg "algorithm"

\makeatletter
\def\BState{\State\hskip-\ALG@thistlm}
\makeatother
\begin{algorithm}[H]
\caption{${1}}
\begin{algorithmic}[1]
\Require
\Ensure

\Function{ ${2} }{ ${3} }
	\If { }
		\Return
	\ElsIf{ }
		\Return { }
	\Else \quad
		\Return{ }
	\EndIf
\EndFunction
\State{ }


\end{algorithmic}
\end{algorithm}
endsnippet

snippet tab "latex-table"
\begin{table}[H]
\caption{${1}}
\vspace{20pt}
\centering
\begin{tabular}{lllll}
\hline
\thead[c]{${2}} & \thead[c]{${3}}  & \thead[c]{${4}} \\\\
\hline

${5} & ${6} & ${7} \\\\
${8} & ${9} & ${10} \\\\
${10} & ${11} & ${12} \\\\

\hline
\end{tabular}
\label{bs}
\end{table}
endsnippet

snippet sec "mysection"
\section{$1}
$0
endsnippet

snippet sub "mysubsection"
\subsection{$1}
$0
endsnippet


snippet subs "mysubsubsection"
\subsubsection{$1}
$0
endsnippet
